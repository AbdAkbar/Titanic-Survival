{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.070026Z",
     "iopub.status.busy": "2020-10-27T00:17:23.069209Z",
     "iopub.status.idle": "2020-10-27T00:17:23.073489Z",
     "shell.execute_reply": "2020-10-27T00:17:23.074062Z"
    },
    "papermill": {
     "duration": 0.031079,
     "end_time": "2020-10-27T00:17:23.074247",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.043168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/gender_submission.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/train.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.119752Z",
     "iopub.status.busy": "2020-10-27T00:17:23.118954Z",
     "iopub.status.idle": "2020-10-27T00:17:23.136623Z",
     "shell.execute_reply": "2020-10-27T00:17:23.135886Z"
    },
    "papermill": {
     "duration": 0.042467,
     "end_time": "2020-10-27T00:17:23.136772",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.094305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "raw_test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.218197Z",
     "iopub.status.busy": "2020-10-27T00:17:23.215300Z",
     "iopub.status.idle": "2020-10-27T00:17:23.228675Z",
     "shell.execute_reply": "2020-10-27T00:17:23.227755Z"
    },
    "papermill": {
     "duration": 0.058432,
     "end_time": "2020-10-27T00:17:23.228897",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.170465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable:  PassengerId     Missing Values:  0\n",
      "Variable:  Survived        Missing Values:  0\n",
      "Variable:  Pclass          Missing Values:  0\n",
      "Variable:  Name            Missing Values:  0\n",
      "Variable:  Sex             Missing Values:  0\n",
      "Variable:  Age             Missing Values:  177\n",
      "Variable:  SibSp           Missing Values:  0\n",
      "Variable:  Parch           Missing Values:  0\n",
      "Variable:  Ticket          Missing Values:  0\n",
      "Variable:  Fare            Missing Values:  0\n",
      "Variable:  Cabin           Missing Values:  687\n",
      "Variable:  Embarked        Missing Values:  2\n"
     ]
    }
   ],
   "source": [
    "## Let's see the volume of missing data in each column\n",
    "for i in raw_train_data.columns:\n",
    "    print('Variable: ', '{:<15}'.format(i), 'Missing Values: ', raw_train_data[i].isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.290594Z",
     "iopub.status.busy": "2020-10-27T00:17:23.286515Z",
     "iopub.status.idle": "2020-10-27T00:17:23.311394Z",
     "shell.execute_reply": "2020-10-27T00:17:23.310620Z"
    },
    "papermill": {
     "duration": 0.054509,
     "end_time": "2020-10-27T00:17:23.311522",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.257013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0         0       3    male  22.0      1      0   7.2500        S\n",
       "1         1       1  female  38.0      1      0  71.2833        C\n",
       "2         1       3  female  26.0      0      0   7.9250        S\n",
       "3         1       1  female  35.0      1      0  53.1000        S\n",
       "4         0       3    male  35.0      0      0   8.0500        S"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Notably, the cabin feature is missing for 687 of the total 891 observances\n",
    "## Let's drop this variable\n",
    "## Let's also drop PassengerId, Name, and Ticket \n",
    "## We create a checkpoint here\n",
    "\n",
    "train_data = raw_train_data.drop(['Cabin'], axis=1)\n",
    "train_data = train_data.drop(['PassengerId'], axis=1)\n",
    "train_data = train_data.drop(['Name'], axis=1)\n",
    "train_data = train_data.drop(['Ticket'], axis=1)\n",
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.379108Z",
     "iopub.status.busy": "2020-10-27T00:17:23.378060Z",
     "iopub.status.idle": "2020-10-27T00:17:23.383804Z",
     "shell.execute_reply": "2020-10-27T00:17:23.383068Z"
    },
    "papermill": {
     "duration": 0.049918,
     "end_time": "2020-10-27T00:17:23.383930",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.334012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0          892       3    male  34.5      0      0   7.8292        Q\n",
       "1          893       3  female  47.0      1      0   7.0000        S\n",
       "2          894       2    male  62.0      0      0   9.6875        Q\n",
       "3          895       3    male  27.0      0      0   8.6625        S\n",
       "4          896       3  female  22.0      1      1  12.2875        S"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## For the test data, we need to keep the PassengerId column\n",
    "test_data = raw_test_data.drop(['Cabin'], axis=1)\n",
    "test_data = test_data.drop(['Name'], axis=1)\n",
    "test_data = test_data.drop(['Ticket'], axis=1)\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.433288Z",
     "iopub.status.busy": "2020-10-27T00:17:23.432175Z",
     "iopub.status.idle": "2020-10-27T00:17:23.441809Z",
     "shell.execute_reply": "2020-10-27T00:17:23.441131Z"
    },
    "papermill": {
     "duration": 0.037302,
     "end_time": "2020-10-27T00:17:23.441938",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.404636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean      32.204208\n",
       "std       49.693429\n",
       "min        0.000000\n",
       "25%        7.910400\n",
       "50%       14.454200\n",
       "75%       31.000000\n",
       "max      512.329200\n",
       "Name: Fare, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## The fare paid is an indication of placement on the ship\n",
    "## A more expensive fare should correspond to a superior placement on the ship\n",
    "## This likely effects probability of survival\n",
    "## Instead of the exact fare, we are more interested in categories of fares\n",
    "## Let's create 4 categories, based on quartiles\n",
    "\n",
    "train_data['Fare'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.498395Z",
     "iopub.status.busy": "2020-10-27T00:17:23.497387Z",
     "iopub.status.idle": "2020-10-27T00:17:23.535397Z",
     "shell.execute_reply": "2020-10-27T00:17:23.534605Z"
    },
    "papermill": {
     "duration": 0.072291,
     "end_time": "2020-10-27T00:17:23.535525",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.463234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean       1.453423\n",
       "std        1.124206\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        1.000000\n",
       "75%        2.000000\n",
       "max        3.000000\n",
       "Name: Fare, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for df in (train_data, test_data):\n",
    "    df['Fare'] = df['Fare'].fillna(0)\n",
    "    df['Fare'] = df['Fare'].astype(int)\n",
    "\n",
    "    df.loc[train_data['Fare'] <= 7.91, 'Fare'] = 0\n",
    "    df.loc[(df['Fare'] > 7.91) & (df['Fare'] <= 14.4542), 'Fare'] = 1\n",
    "    df.loc[(df['Fare'] > 14.4542) & (df['Fare'] <= 31), 'Fare'] = 2\n",
    "    df.loc[df['Fare'] > 31, 'Fare'] = 3\n",
    "    df['Fare'] = df['Fare'].astype(int)\n",
    "\n",
    "train_data['Fare'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.592776Z",
     "iopub.status.busy": "2020-10-27T00:17:23.587993Z",
     "iopub.status.idle": "2020-10-27T00:17:23.677921Z",
     "shell.execute_reply": "2020-10-27T00:17:23.677275Z"
    },
    "papermill": {
     "duration": 0.120686,
     "end_time": "2020-10-27T00:17:23.678042",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.557356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.318643</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>1.453423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>13.281103</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>1.124206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>21.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>26.507589</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age       SibSp       Parch        Fare\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000\n",
       "mean     0.383838    2.308642   29.318643    0.523008    0.381594    1.453423\n",
       "std      0.486592    0.836071   13.281103    1.102743    0.806057    1.124206\n",
       "min      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n",
       "25%      0.000000    2.000000   21.750000    0.000000    0.000000    0.000000\n",
       "50%      0.000000    3.000000   26.507589    0.000000    0.000000    1.000000\n",
       "75%      1.000000    3.000000   36.000000    1.000000    0.000000    2.000000\n",
       "max      1.000000    3.000000   80.000000    8.000000    6.000000    3.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## We need to fill in the missing age values\n",
    "## This can be done many ways, but let us use the average age for a given combination of Sex and Pclass\n",
    "## This will provide a more accurate estimate for age\n",
    "train_data['Age'] = train_data.groupby(['Sex', 'Pclass']).transform(lambda x: x.fillna(x.mean()))['Age']\n",
    "test_data['Age'] = test_data.groupby(['Sex', 'Pclass']).transform(lambda x: x.fillna(x.mean()))['Age']\n",
    "\n",
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.754774Z",
     "iopub.status.busy": "2020-10-27T00:17:23.753716Z",
     "iopub.status.idle": "2020-10-27T00:17:23.758679Z",
     "shell.execute_reply": "2020-10-27T00:17:23.757938Z"
    },
    "papermill": {
     "duration": 0.058207,
     "end_time": "2020-10-27T00:17:23.758817",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.700610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex  Age  SibSp  Parch  Fare Embarked\n",
       "0         0       3    male    2      1      0     0        S\n",
       "1         1       1  female    3      1      0     3        C\n",
       "2         1       3  female    3      0      0     0        S\n",
       "3         1       1  female    3      1      0     3        S\n",
       "4         0       3    male    3      0      0     1        S"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## The exact age of a person doesn't tell us much\n",
    "## Categorizing passengers based on age into infants, children, young adults, adults, and seniors would be more useful\n",
    "\n",
    "for df in (train_data, test_data):\n",
    "\n",
    "    df.loc[df['Age'] <= 2, 'Age'] = 0 # toddlers\n",
    "    df.loc[(df['Age'] > 5) & (df['Age'] <= 13), 'Age'] = 1 # children\n",
    "    df.loc[(df['Age'] > 13) & (df['Age'] <= 24), 'Age'] = 2 # young adults\n",
    "    df.loc[(df['Age'] > 25) & (df['Age'] <= 60), 'Age'] = 3 # adults\n",
    "    df.loc[df['Age'] > 60, 'Age'] = 4 # seniors\n",
    "    df['Age'] = df['Age'].astype(int)\n",
    "\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.824365Z",
     "iopub.status.busy": "2020-10-27T00:17:23.814915Z",
     "iopub.status.idle": "2020-10-27T00:17:23.827607Z",
     "shell.execute_reply": "2020-10-27T00:17:23.826988Z"
    },
    "papermill": {
     "duration": 0.045279,
     "end_time": "2020-10-27T00:17:23.827753",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.782474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Finally, let's convert our two categorical features (Sex and Embarked) into numbers\n",
    "## Note there are two missing values for Embarked\n",
    "## Let's fill these with the most common Port of Embarkation\n",
    "\n",
    "\n",
    "\n",
    "for df in (train_data, test_data):\n",
    "\n",
    "    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
    "    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
    "\n",
    "    df['Sex'] = df['Sex'].map({'male':0, 'female':1})\n",
    "    df['Embarked'] = df['Embarked'].map({'S':0, 'C':1, 'Q':2})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.887980Z",
     "iopub.status.busy": "2020-10-27T00:17:23.887024Z",
     "iopub.status.idle": "2020-10-27T00:17:23.891998Z",
     "shell.execute_reply": "2020-10-27T00:17:23.891358Z"
    },
    "papermill": {
     "duration": 0.040556,
     "end_time": "2020-10-27T00:17:23.892135",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.851579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass  Sex  Age  SibSp  Parch  Fare  Embarked\n",
       "0          892       3    0    3      0      0     0         2\n",
       "1          893       3    1    3      1      0     0         0\n",
       "2          894       2    0    4      0      0     0         2\n",
       "3          895       3    0    3      0      0     0         0\n",
       "4          896       3    1    2      1      1     0         0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:23.948843Z",
     "iopub.status.busy": "2020-10-27T00:17:23.947763Z",
     "iopub.status.idle": "2020-10-27T00:17:23.951303Z",
     "shell.execute_reply": "2020-10-27T00:17:23.950637Z"
    },
    "papermill": {
     "duration": 0.034941,
     "end_time": "2020-10-27T00:17:23.951432",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.916491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = train_data.iloc[:,1:]\n",
    "test_X = test_data.iloc[:,1:]\n",
    "\n",
    "y = train_data['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:24.008603Z",
     "iopub.status.busy": "2020-10-27T00:17:24.007850Z",
     "iopub.status.idle": "2020-10-27T00:17:25.318604Z",
     "shell.execute_reply": "2020-10-27T00:17:25.317831Z"
    },
    "papermill": {
     "duration": 1.342677,
     "end_time": "2020-10-27T00:17:25.318771",
     "exception": false,
     "start_time": "2020-10-27T00:17:23.976094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Finally, let's set up and run our model\n",
    "## First, we split our current training data into training and validation\n",
    "## To determine optimial model parameters, we run a nested loop and predict on our validation set\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n",
    "\n",
    "# best_OOB = 0\n",
    "# for i in range(20,200,10):\n",
    "#     for j in range(1,10,1):\n",
    "#         trial_model = RandomForestClassifier(n_estimators=100,\n",
    "#                                            min_samples_split=i,\n",
    "#                                            min_samples_leaf=j,\n",
    "#                                            max_depth=5, \n",
    "#                                            oob_score=True,\n",
    "#                                            random_state=1)\n",
    "#         trial_model.fit(train_X, train_y)\n",
    "#         val_predict = trial_model.predict(val_X)\n",
    "#         val_mae = mean_absolute_error(val_predict, val_y)\n",
    "        \n",
    "#         if trial_model.oob_score_ > best_OOB:\n",
    "#             best_OOB = trial_model.oob_score_\n",
    "#             best_min_samples_split = i\n",
    "#             best_min_samples_leaf = j\n",
    "            \n",
    "        \n",
    "#         print(\"min_samples_split: {} \\t min_samples_leaf: {} \\t OOB Score: {} \\t MAE: {}\".format(i, j, trial_model.oob_score_,val_mae))\n",
    "#         print()\n",
    "        \n",
    "# print(\"The optimal model has the following parameters, for an Out-of-bag score of {}: \" \n",
    "#           \"min_samples_split = {}, min_samples_leaf = {}\".format(best_OOB,best_min_samples_split,best_min_samples_leaf))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:25.378430Z",
     "iopub.status.busy": "2020-10-27T00:17:25.377654Z",
     "iopub.status.idle": "2020-10-27T00:17:39.502080Z",
     "shell.execute_reply": "2020-10-27T00:17:39.501265Z"
    },
    "papermill": {
     "duration": 14.158603,
     "end_time": "2020-10-27T00:17:39.502211",
     "exception": false,
     "start_time": "2020-10-27T00:17:25.343608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "model_params = {\n",
    "    'n_estimators': [70,80,90,100,110,200,300,400],\n",
    "    'learning_rate': [0.1,0.01,0.05,0.001],\n",
    "    \n",
    "    }\n",
    "\n",
    "xg_model = XGBClassifier(random_state=1)\n",
    "clf = GridSearchCV(xg_model, model_params, cv=5)\n",
    "gmodel = clf.fit(X, y)\n",
    "\n",
    "predictions = gmodel.predict(test_X)\n",
    "\n",
    "output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n",
    "output.to_csv('Titanic_Submission_Oct26C.csv', index=False)\n",
    "\n",
    "# from pprint import pprint\n",
    "# pprint(gmodel.best_estimator_.get_params())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-27T00:17:39.558815Z",
     "iopub.status.busy": "2020-10-27T00:17:39.557724Z",
     "iopub.status.idle": "2020-10-27T00:17:39.560511Z",
     "shell.execute_reply": "2020-10-27T00:17:39.561070Z"
    },
    "papermill": {
     "duration": 0.033597,
     "end_time": "2020-10-27T00:17:39.561226",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.527629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ## Let's build our final model with the optimal parameters\n",
    "# from xgboost import XGBClassifier\n",
    "\n",
    "# # model = RandomForestClassifier(n_estimators=100,\n",
    "# #                                min_samples_split=best_min_samples_split, \n",
    "# #                                min_samples_leaf=best_min_samples_leaf,\n",
    "# #                                max_depth=5,\n",
    "# #                                oob_score=True,\n",
    "# #                                random_state=1)\n",
    "\n",
    "# model = XGBClassifier(n_estimators=100, learning_rate=0.05, random_state=1)\n",
    "\n",
    "# model.fit(X, y)\n",
    "# predictions = model.predict(test_X)\n",
    "\n",
    "# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\n",
    "# output.to_csv('Titanic_Submission_Oct26B.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.024611,
     "end_time": "2020-10-27T00:17:39.610741",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.586130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.034277,
     "end_time": "2020-10-27T00:17:39.670280",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.636003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.025144,
     "end_time": "2020-10-27T00:17:39.720606",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.695462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.026454,
     "end_time": "2020-10-27T00:17:39.772348",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.745894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.024776,
     "end_time": "2020-10-27T00:17:39.822087",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.797311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.024798,
     "end_time": "2020-10-27T00:17:39.872025",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.847227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "papermill": {
     "duration": 0.024685,
     "end_time": "2020-10-27T00:17:39.921812",
     "exception": false,
     "start_time": "2020-10-27T00:17:39.897127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "papermill": {
   "duration": 22.934895,
   "end_time": "2020-10-27T00:17:41.033396",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2020-10-27T00:17:18.098501",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
